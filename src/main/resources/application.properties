# ===============================
# = BASIC DATA
# ===============================
server.port = 9090
spring.application.name = KatanoxAPI
server.servlet.context-path = /katanox
java.runtime.version=11

# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database
spring.datasource.url=jdbc:postgresql://ec2-54-246-85-151.eu-west-1.compute.amazonaws.com:5432/d8jusaef05akri?currentSchema=public

# Username and password
spring.datasource.username=xxdhklwwzvcvan
spring.datasource.password=4e9ce5b4553b0acb1da1eaa885908ba32295f30acb0e7a6779d19c4101b4b0df
spring.datasource.validationQuery = SELECT 1


# Log JPA
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

#OSIV enables OpenEntityManagerInViewInterceptor to register EntityManager to the current thread
spring.jpa.open-in-view=true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto=create-drop

# Naming strategy
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect





